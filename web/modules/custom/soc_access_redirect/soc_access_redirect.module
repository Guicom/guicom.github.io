<?php

/**
 * @file
 * Contains prae_core.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;


/*******************************
-------- SECURITY HOOKS --------
 *******************************/

/**
 * Implements hook_ENTITY_TYPE_access() to control files access.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 */
function soc_access_redirect_file_access(EntityInterface  $entity, $operation, AccountInterface $account) {
  $access = AccessResult::neutral();
  if($operation === 'download'){
    // Get fid
    $fid = $entity->id();
    $file = \Drupal\file\Entity\File::load($fid);
    $references = file_get_file_references($file);
    $ids = [];
    // get ids of media reference by fid
    foreach ($references as $reference){
      foreach($reference['media'] as $media){
        $ids[] = $media->id();
      }
    }

    // Request on noeuds with associated media id
    $query = \Drupal::entityQuery('node');
    $query->condition('type', 'thank_you_page');
    $query->condition('field_file', $ids, 'IN');
    $nb_resultats = $query->count()->execute();

    // If result compare media id with requested media id.
    if($nb_resultats > 0){
      $cookies = \Drupal::request()->cookies->all();
      $access_test = false;
      if(!empty($cookies['soc_private_media_access'])){
        $soc_private_media_access = unserialize($cookies['soc_private_media_access']);
        foreach ($ids as $id){
          if (in_array($id, $soc_private_media_access)) {
            $access_test = true;
          }
        }
      }
      
      if($access_test === false){
        $access = AccessResult::forbidden();
      }
    }
  }
  return $access;
}