<?php

/**
 * @file
 * Contains prae_core.module.
 */

use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_ENTITY_TYPE_access() to control files access.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 */
function soc_access_redirect_file_access(EntityInterface  $entity, $operation, AccountInterface $account) {
  $access = AccessResult::neutral();
  if ($operation === 'download'){
    // Get fid
    $fid = $entity->id();
    if (!empty($fid)){
      $file = \Drupal\file\Entity\File::load($fid);
    }
    if (!empty($file)) {
      $references = file_get_file_references($file);
    }

    $ids = [];
    // get ids of media reference by fid
    if (!empty($references)) {
      foreach ($references as $reference) {
        if (isset($reference['media'])) {
          foreach ($reference['media'] as $media) {
            $ids[] = $media->id();
          }
        }
      }
    }
    // Request on noeuds with associated media id
    $resultsCount = 0;
    if (!empty($ids)) {
      $query = \Drupal::entityQuery('node');
      $query->condition('type', 'thank_you_page');
      $query->condition('field_file', $ids, 'IN');
      $resultsCount = $query->count()->execute();
    }


    // If result compare media id with requested media id.
    if ($resultsCount > 0){
      $cookies = \Drupal::request()->cookies->all();
      $accessTest = false;
      if (!empty($cookies['soc_private_media_access'])){
        $socPrivateMediaAccess = unserialize($cookies['soc_private_media_access']);
        foreach ($ids as $id){
          if (in_array($id, $socPrivateMediaAccess)) {
            $accessTest = true;
          }
        }
      }

      if ($accessTest === false){
        $access = AccessResult::forbidden();
        // Clear cache page.
        \Drupal::service('page_cache_kill_switch')->trigger();
      }
    }
  }
  return $access;
}


/**
 * Implements hook_block_access().
 *
 * @param \Drupal\block\Entity\Block $block
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultNeutral
 */
function soc_access_redirect_block_access(Block $block, $operation, AccountInterface $account) {
  // If operation is view
  if (strcmp($operation,'view') === 0){
    // If block id is socomec_footer
    if (strcmp($block->id(),'socomec_footer') === 0){
      // Load node
      $node = Drupal::routeMatch()->getParameter('node');
      // If node is instance of NodeInterface
      if ($node instanceof NodeInterface) {
        // If node has field_footer_version
        if ($node->hasField('field_footer_version')) {
          // If field_footer_version is not empty
          if (!$node->get('field_footer_version')->isEmpty()) {
            // Get field_footer_version field value
            $footer_version = $node->get('field_footer_version')->getValue();
            // If $footer_version is not empty and if value is equal to short change Access to forbidden
            if (!empty($footer_version[0]['value']) && strcmp($footer_version[0]['value'],'short') === 0) {
              return AccessResult::forbidden();
            }
          }
        }
      }
    }
  }
  return AccessResult::neutral();
}
