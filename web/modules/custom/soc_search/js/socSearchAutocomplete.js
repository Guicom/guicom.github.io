/**
 * DO NOT EDIT THIS FILE.
 * See the following change record for more information,
 * https://www.drupal.org/node/2815083
 * @preserve
 **/

(function ($, Drupal, drupalSettings) {


  Drupal.behaviors.socSearchAutocomplete = {
    attach: function attach(context, settings) {
      var element = $(context).find('input.soc-search-form-autocomplete').once('socSearchAutocomplete');
      $('.see-all-search-suggestions').once('socSearchAutocomplete').click(function (e) {
        e.preventDefault();
        $('#views-exposed-form-global-search-page-1').submit();
      });
      $(".block-soc-search").once('socSearchAutocomplete').on("click", ".search-default-suggestions .result-search-suggestions a", function (e) {
        e.preventDefault();
        var searchValue = $(this).attr("data-soc-search-value");
        $('#views-exposed-form-global-search-page-1 input[name="search_api_fulltext"]').val(searchValue);
        $('#views-exposed-form-global-search-page-1').submit();
      });
      if (element.length) {
        var minLength = 1;
        if (settings
          && settings.search_api_autocomplete
          && settings.search_api_autocomplete['global_search']
          && settings.search_api_autocomplete['global_search']['min_length']) {
          minLength = settings.search_api_autocomplete['global_search']['min_length'];
        }
        var path = element.attr('data-autocomplete-path');
        var value = element.attr('value');
        if (value.length >= minLength) {
          Drupal.behaviors.socSearchAutocomplete.ajax(path, value);
        }

        element.bind('change keyup', this.delay(function (e) {
          value = $(this).val();
          if (value.length >= minLength) {
            Drupal.behaviors.socSearchAutocomplete.ajax(path, value);
          }
          else {
            Drupal.behaviors.socSearchAutocomplete.hideNoResult();
            Drupal.behaviors.socSearchAutocomplete.hideResult();
            Drupal.behaviors.socSearchAutocomplete.showBlock();
          }
        }, 250));
      }
    },
    ajax: function (path, value) {
      $.ajax({
        url: path,
        type: 'GET',
        data: {q: value},
        dataType: 'json', // On dÃ©sire recevoir du HTML
        success: function (output, statut) {
          var result = false;
          if (typeof output['suggestion'] !== 'undefined' || typeof output['categorized'] !== 'undefined') {
            var suggestion = $(".block-soc-search .submenu-bg-bottom .search-default-suggestions .result-search-suggestions > ul");
            suggestion.empty();

            var categorized = $(".block-soc-search .submenu-bg-bottom .search-categorized-suggestions .result-search-suggestions > ul");
            categorized.empty();

            if (typeof output['suggestion'] !== 'undefined' && output['suggestion'].length) {
              for (var itemSuggestion in output['suggestion']) {
                result = true;
                Drupal.behaviors.socSearchAutocomplete.hideNoResult();
                Drupal.behaviors.socSearchAutocomplete.hideBlock();
                Drupal.behaviors.socSearchAutocomplete.showResult();
                suggestion.prepend('<li class="nav-item"><a class="nav-link" href="#search" data-soc-search-value="' + output['suggestion'][itemSuggestion].value + '">' + output['suggestion'][itemSuggestion].label + '</a></li>');
              }
            }

            if (typeof output['categorized'] !== 'undefined' && output['categorized'].length) {
              for (var itemCategorized in output['categorized']) {
                result = true;
                Drupal.behaviors.socSearchAutocomplete.hideNoResult();
                Drupal.behaviors.socSearchAutocomplete.hideBlock();
                Drupal.behaviors.socSearchAutocomplete.showResult();
                categorized.prepend('<li class="nav-item"><a class="nav-link" href="' + output['categorized'][itemCategorized].url + '"><span class="search-label">' + output['categorized'][itemCategorized].value + '</span><span class="search-bundle">' + output['categorized'][itemCategorized].bundle + '</span></a></li>');
              }
            }
          }
          if (result === false) {
            Drupal.behaviors.socSearchAutocomplete.hideBlock();
            Drupal.behaviors.socSearchAutocomplete.showNoResult();
          }
        }
      });
    },
    showBlock: function () {
      $(".block-soc-search .wrapper-bottom-search .block").show();
      $(".block-soc-search .wrapper-bottom-search.quick").removeClass("col-lg-6");
      $(".block-soc-search .wrapper-bottom-search.quick").removeClass("col-lg-3");
      $(".block-soc-search .wrapper-bottom-search.quick").addClass("col-lg-3");
    },
    hideBlock: function () {
      $(".block-soc-search .wrapper-bottom-search .block").hide();
      $(".block-soc-search .wrapper-bottom-search.quick").removeClass("col-lg-6");
      $(".block-soc-search .wrapper-bottom-search.quick").removeClass("col-lg-3");
      $(".block-soc-search .wrapper-bottom-search.quick").addClass("col-lg-6");
    },
    showResult: function () {
      $(".block-soc-search .submenu-bg-bottom .search-suggestions").show();
    },
    hideResult: function () {
      $(".block-soc-search .submenu-bg-bottom .search-suggestions").hide();
    },
    showNoResult: function () {
      $(".block-soc-search .wrapper-bottom-search").hide();
      $(".block-soc-search .search-suggestions-no-result").show();
    },
    hideNoResult: function () {
      $(".block-soc-search .search-suggestions-no-result").hide();
      $(".block-soc-search .wrapper-bottom-search").show();
    },
    delay: function (callback, ms) {
      var timer = 0;
      return function () {
        var context = this, args = arguments;
        clearTimeout(timer);
        timer = setTimeout(function () {
          callback.apply(context, args);
        }, ms || 0);
      };
    }
  };

})(jQuery, Drupal);
