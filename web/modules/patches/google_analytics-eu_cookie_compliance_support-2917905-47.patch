diff --git a/config/install/google_analytics.settings.yml b/config/install/google_analytics.settings.yml
index f14f25d..543ae2a 100644
--- a/config/install/google_analytics.settings.yml
+++ b/config/install/google_analytics.settings.yml
@@ -23,6 +23,7 @@ track:
   displayfeatures: true
 privacy:
   anonymizeip: true
+  eu_cookie_compliance: false
 custom:
   dimension: {  }
   metric: {  }
diff --git a/config/schema/google_analytics.schema.yml b/config/schema/google_analytics.schema.yml
index dbaa929..cd55091 100644
--- a/config/schema/google_analytics.schema.yml
+++ b/config/schema/google_analytics.schema.yml
@@ -88,6 +88,15 @@ google_analytics.settings:
         anonymizeip:
           type: boolean
           label: 'Anonymize visitors IP address'
+        eu_cookie_compliance:
+          type: boolean
+          label: 'EU Cookie Compliance support'
+        eu_cookie_compliance_anonymizeip:
+          type: boolean
+          label: 'EU Cookie Compliance support anonymizeip'
+        eu_cookie_compliance_categories:
+            type: string
+            label: 'EU Cookie Compliance support categories'
     custom:
       type: mapping
       label: 'Custom variables'
diff --git a/google_analytics.module b/google_analytics.module
index 6a8b775..bc71175 100644
--- a/google_analytics.module
+++ b/google_analytics.module
@@ -285,7 +285,7 @@ function google_analytics_page_attachments(array &$page) {
       $arguments['user_id'] = google_analytics_user_id_hash($account->id());
     }
 
-    if ($config->get('privacy.anonymizeip')) {
+    if ($config->get('privacy.anonymizeip') || $config->get('privacy.eu_cookie_compliance_anonymizeip')) {
       $arguments['anonymize_ip'] = TRUE;
     }
 
@@ -319,6 +319,12 @@ function google_analytics_page_attachments(array &$page) {
     // Prepare Adsense tracking.
     $googleanalytics_adsense_script .= 'window.google_analytics_uacct = ' . Json::encode($id) . ';';
 
+    // EU Cookie Compliance
+    $eu_cookie_compliance_support = $config->get('privacy.eu_cookie_compliance', 0);
+    if (\Drupal::moduleHandler()->moduleExists('eu_cookie_compliance') && $eu_cookie_compliance_support) {
+      $script = _google_analytics_eu_cookie_compliance_script_alter($script, $config);
+    }
+
     if (!empty($custom_var)) {
       $script .= $custom_var;
     }
@@ -363,6 +369,22 @@ function google_analytics_page_attachments(array &$page) {
       'google_analytics_tracking_file',
     ];
 
+    // EU Cookie Compliance support
+    if (\Drupal::moduleHandler()->moduleExists('eu_cookie_compliance') && $eu_cookie_compliance_support) {
+      $module_handler = \Drupal::service('module_handler');
+      $module_path = $module_handler->getModule('google_analytics')->getPath();
+
+      $page['#attached']['html_head'][] = [
+        [
+          '#tag' => 'script',
+          '#attributes' => [
+            'src' => '/' . $module_path . '/js/google_analytics_ecc.js',
+          ],
+        ],
+        'google_analytics_ecc_js',
+      ];
+    }
+
     $page['#attached']['html_head'][] = [
       [
         '#tag' => 'script',
@@ -693,3 +715,41 @@ function _google_analytics_visibility_pages() {
   }
   return $page_match;
 }
+
+/**
+ * Function to prevent google analytics tracking without the user consent
+ * from eu_cookie_compliance module.
+ */ 
+function _google_analytics_eu_cookie_compliance_script_alter($script, $config) {
+  global $cookie_domain;
+
+  $config_eu_cookie_compliance = \Drupal::config('eu_cookie_compliance.settings');
+  $cookie_name = (!empty($config_eu_cookie_compliance->get('cookie_name'))) ? $config->get('cookie_name') : 'cookie-agreed';
+
+  $cookie_name_categorie = 'none';
+  $eu_cookie_compliance_method = $config_eu_cookie_compliance->get('method');
+  if ($eu_cookie_compliance_method == 'categories') {
+    $cookie_name_categorie = $config->get('privacy.eu_cookie_compliance_categories');
+  }
+
+  if ($config->get('privacy.eu_cookie_compliance_anonymizeip')) {
+    $eu_script = "if (google_analytics_ecc_has_agreed('$cookie_name', '$cookie_name_categorie')) {";
+    $eu_script .= str_replace(',"anonymize_ip":true', '', $script);
+    $eu_script .= "}";
+    $eu_script .= "else {";
+    $eu_script .= $script;
+    $eu_script .= "}";
+  }
+  else {
+    $eu_script = "if (google_analytics_ecc_has_agreed('$cookie_name', '$cookie_name_categorie')) {";
+    $eu_script .= $script;
+    $eu_script .= "}";
+    $eu_script .= "else {";
+    $eu_script .= "google_analytics_ecc_delete_cookie('_ga','$cookie_domain');";
+    $eu_script .= "google_analytics_ecc_delete_cookie('_gat','$cookie_domain');";
+    $eu_script .= "google_analytics_ecc_delete_cookie('_gid','$cookie_domain');";
+    $eu_script .= "}";
+  }
+
+  return $eu_script;
+}
diff --git a/js/google_analytics.admin.js b/js/google_analytics.admin.js
index c989f2d..29e42d9 100644
--- a/js/google_analytics.admin.js
+++ b/js/google_analytics.admin.js
@@ -133,6 +133,9 @@
         if ($('input#edit-google-analytics-tracker-anonymizeip', context).is(':checked')) {
           vals.push(Drupal.t('Anonymize IP'));
         }
+        if ($('input#edit-google-analytics-eu-cookie-compliance', context).is(':checked')) {
+          vals.push(Drupal.t('EU Cookie Compliance'));
+        }
         if (!vals.length) {
           return Drupal.t('No privacy');
         }
diff --git a/src/Form/GoogleAnalyticsAdminSettingsForm.php b/src/Form/GoogleAnalyticsAdminSettingsForm.php
index bd39c33..1913548 100644
--- a/src/Form/GoogleAnalyticsAdminSettingsForm.php
+++ b/src/Form/GoogleAnalyticsAdminSettingsForm.php
@@ -374,6 +374,44 @@ class GoogleAnalyticsAdminSettingsForm extends ConfigFormBase {
       '#description' => $this->t('Tell Google Analytics to anonymize the information sent by the tracker objects by removing the last octet of the IP address prior to its storage. Note that this will slightly reduce the accuracy of geographic reporting. In some countries it is not allowed to collect personally identifying information for privacy reasons and this setting may help you to comply with the local laws.'),
       '#default_value' => $config->get('privacy.anonymizeip'),
     ];
+    if (\Drupal::moduleHandler()->moduleExists('eu_cookie_compliance')) {
+      $form['tracking']['privacy']['google_analytics_eu_cookie_compliance'] = [
+        '#type' => 'checkbox',
+        '#title' => $this->t('Eu cookie compliance support'),
+        '#description' => $this->t('If enabled, the Google Analytics module will not track users as long as we have not their consent. This option is designed to work with the module <a href="@eu_cookie_compliance">Eu Cookie Compliance</a>.', array('@eu_cookie_compliance' => 'https://www.drupal.org/project/eu_cookie_compliance')),
+        '#default_value' => $config->get('privacy.eu_cookie_compliance', 0),
+      ];
+      $form['tracking']['privacy']['google_analytics_eu_cookie_compliance_anonymizeip'] = [
+        '#type' => 'checkbox',
+        '#title' => $this->t('Eu cookie compliance support anonymizeip'),
+        '#description' => $this->t('If enabled, the Google Analytics module will track as anonymize ip informations as long as we have not their consent. This option is designed to work with the module <a href="@eu_cookie_compliance">Eu Cookie Compliance</a>.', array('@eu_cookie_compliance' => 'https://www.drupal.org/project/eu_cookie_compliance')),
+        '#default_value' => $config->get('privacy.eu_cookie_compliance_anonymizeip', 0),
+        '#states' => [
+          'visible' => [
+            ':input[name="google_analytics_eu_cookie_compliance"]' => [
+              'checked' => TRUE,
+            ],
+          ],
+        ],
+      ];
+      $config_eu_cookie_compliance = \Drupal::config('eu_cookie_compliance.settings');
+      $eu_cookie_compliance_method = $config_eu_cookie_compliance->get('method');
+      if ($eu_cookie_compliance_method == 'categories') {
+        $form['tracking']['privacy']['google_analytics_eu_cookie_compliance_categories'] = [
+          '#type' => 'textfield',
+          '#title' => $this->t('Eu cookie compliance support categories'),
+          '#description' => $this->t('If the field is completed, the Google Analytics module will work with "opt-in with categories" consent. This option is designed to work with the module <a href="@eu_cookie_compliance">Eu Cookie Compliance</a>.', array('@eu_cookie_compliance' => 'https://www.drupal.org/project/eu_cookie_compliance')),
+          '#default_value' => $config->get('privacy.eu_cookie_compliance_categories', ''),
+          '#states' => [
+            'visible' => [
+              ':input[name="google_analytics_eu_cookie_compliance"]' => [
+                'checked' => TRUE,
+              ],
+            ],
+          ],
+        ];
+      }
+    }
 
     // Custom Dimensions.
     $form['google_analytics_custom_dimension'] = [
@@ -689,6 +727,9 @@ class GoogleAnalyticsAdminSettingsForm extends ConfigFormBase {
       ->set('track.adsense', $form_state->getValue('google_analytics_trackadsense'))
       ->set('track.displayfeatures', $form_state->getValue('google_analytics_trackdisplayfeatures'))
       ->set('privacy.anonymizeip', $form_state->getValue('google_analytics_tracker_anonymizeip'))
+      ->set('privacy.eu_cookie_compliance', $form_state->getValue('google_analytics_eu_cookie_compliance'))
+      ->set('privacy.eu_cookie_compliance_anonymizeip', $form_state->getValue('google_analytics_eu_cookie_compliance_anonymizeip'))
+      ->set('privacy.eu_cookie_compliance_categories', $form_state->getValue('google_analytics_eu_cookie_compliance_categories'))
       ->set('cache', $form_state->getValue('google_analytics_cache'))
       ->set('debug', $form_state->getValue('google_analytics_debug'))
       ->set('visibility.request_path_mode', $form_state->getValue('google_analytics_visibility_request_path_mode'))
