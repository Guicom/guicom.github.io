<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function socomec_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

function socomec_preprocess_paragraph(&$variables){
  $variables['#attached']['library'][] =  'socomec/datatables-styling';
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function socomec_theme_suggestions_field_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' .
    $element['#field_name'] . '__' . $element['#bundle'] . '__' .
    $element['#view_mode'];
  
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' .
    $element['#field_name'] . '__' . $element['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function socomec_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
    $suggestions[] = 'page__node__' . $node->bundle();
  }
}

/**
  * Implements hook_theme_suggestions_HOOK_alter().
  */
function socomec_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  // Suggestions for custom views_view bundles.
  if (!empty($variables['view'])) {
    $view = $variables['view'];
    if (!empty($view->id()) && !empty($view->getDisplay()->getPluginId())) {
      $id = $view->id();
      $display = $view->current_display;
      $hook = $variables['theme_hook_original'];
      array_splice($suggestions, 1, 0, $hook . '__' . $id . '__' . $display);
    }
  }
}


/**
 * Implements template_preprocess_views_view() for hero view.
 */
function socomec_preprocess_views_view(&$variables) {
  $id = $variables['id'];
  $display_id = $variables['display_id'];
  // Apply background image for hero paragraph view block
  if ((!empty($id) && $id == 'hero_block') && ($display_id == 'block_1' || $display_id == 'block_2')) {
    $rows = $variables['rows'][0]['#rows'];
    $hero_paragraph_id = $rows[0]['#row']->paragraphs_item_field_data_node__field_hero_paragraph_id;
    if(!empty($hero_paragraph_id)){
      /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = Paragraph::load($hero_paragraph_id);
      if(empty($paragraph)){
        return;
      }
      if ($paragraph->hasField('field_background_image')
        && !empty($paragraph->get('field_background_image')->getValue())) {
        $field_background_image_id = $paragraph->get('field_background_image')->first()->getValue()['target_id'];
        $media = Media::load($field_background_image_id);
        $fid = $media->getSource()->getSourceFieldValue($media);
        $file = File::load($fid);
        if(empty($file)){
          return;
        }
        $file_url = file_create_url($file->getFileUri());
      }
      $variables['background_image'] = (!empty($file_url))?$file_url:null;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function socomec_preprocess_views_view_fields__hero_block__block_2(&$variables) {
  $mid = $variables["row"]->_entity->get('field_file')->getString();
  
  if (isset($mid) && !empty($mid)) {
    $media = Media::load($mid);
    $fid = $media->getSource()->getSourceFieldValue($media);
    if ($fid != NULL) {
      $file = File::load($fid);
      if(empty($file)){
        return;
      }
      $variables['file_url'] = file_create_url($file->getFileUri());
    }
  }
}

/**
 * Implements hook_preprocess_media().
 */
function socomec_preprocess_media(array &$variables) {
  if ($variables["view_mode"] == 'simple_html' && $variables["media"]->bundle() == 'image') {
    $variables['content']['url'] = $variables['content']['field_media_image'][0]['#markup'];
    $properties = $variables["media"]->field_media_image->getValue();
    if (isset($properties[0]["alt"])) {
      $variables['content']['alt'] = $properties[0]["alt"];
    }
    if (isset($properties[0]["title"])) {
      $variables['content']['title_image'] = $properties[0]["title"];
    }
  }
}
