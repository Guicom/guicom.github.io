<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Config\Config;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageManager;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\soc_pardot\Form\PrivacyPolicySettingsForm;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function socomec_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

function socomec_preprocess_node(&$variables) {
  $test = 1;
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function socomec_preprocess_paragraph(&$variables){
  $paragraph = $variables['elements']['#paragraph'];
  $bundle = $paragraph->bundle();
  // if paragraph is model_cta
  if ( strcmp($bundle, 'model_cta') === 0) {
    if ($paragraph->hasField('field_cta_color_list')) {
      $field_cta_color_list = (!empty($paragraph->get('field_cta_color_list')->getValue()))?$paragraph->get('field_cta_color_list')->getValue():null;
      if (!empty($field_cta_color_list[0]['value'])) {
        $variables['cta_class'] = $field_cta_color_list[0]['value'];
      }
    }
    if ($paragraph->hasField('field_cta')) {
      $field_cta = (!empty($paragraph->get('field_cta')->getValue()))?$paragraph->get('field_cta')->getValue():null;
      if (!empty($field_cta[0]['uri'])) {
        $variables['cta_url'] = $field_cta[0]['uri'];
      }
      if (!empty($field_cta[0]['title'])) {
        $variables['cta_title'] = $field_cta[0]['title'];
      }
      elseif($field_cta[0]['uri']){
        $variables['cta_title'] = $field_cta[0]['uri'];
      }
    }
    if ($paragraph->hasField('field_target')) {
      $field_target = (!empty($paragraph->get('field_target')->getValue()))?$paragraph->get('field_target')->getValue():null;
      if (!empty($field_target[0]['value']) && strcmp($field_target[0]['value'], 1) === 0) {
        $variables['cta_target'] = '_blank';
      }

    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function socomec_preprocess_field(&$variables) {
  switch ($variables["field_name"]) {
    case 'field_pardot_form_url':
      // Add CTA text on ancher button.
      $variables['cta_text'] = $variables["element"]["#object"]->field_pardot_cta_text->value
        ? $variables["element"]["#object"]->field_pardot_cta_text->value : t('Download');

      // Manage privacy policy.
      if (empty($variables["element"]["#object"]->field_pardot_privacy_policy->value)) {
        $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $variables['legal_mentions'] = \Drupal::config(PrivacyPolicySettingsForm::PARDOT_SETTINGS_KEY)->get('text_default_' . $lang_id)['value'];
      }
      else {
        $variables['legal_mentions'] = $variables["element"]["#object"]->field_pardot_privacy_policy->value;
      }
      break;

    case 'field_product_reference':
      $table = Drupal::service('soc_nextpage.product_reference_table');
      $variables['render_table'] = $table->buildTable($variables);
      break;
  }
}


/**
 * Implements hook_theme_suggestions_field_alter().
 */
function socomec_theme_suggestions_field_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#entity_type'] . '__' .
    $element['#field_name'] . '__' . $element['#bundle'] . '__' .
    $element['#view_mode'];

  $suggestions[] = 'field__' . $element['#entity_type'] . '__' .
    $element['#field_name'] . '__' . $element['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function socomec_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $suggestions[] = 'page__' . $node->bundle();
    $suggestions[] = 'page__node__' . $node->bundle();
  }
  $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($term instanceof Drupal\taxonomy\TermInterface) {
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}

/**
  * Implements hook_theme_suggestions_HOOK_alter().
  */
function socomec_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  // Suggestions for custom views_view bundles.
  if (!empty($variables['view'])) {
    $view = $variables['view'];
    if (!empty($view->id()) && !empty($view->getDisplay()->getPluginId())) {
      $id = $view->id();
      $display = $view->current_display;
      $hook = $variables['theme_hook_original'];
      array_splice($suggestions, 1, 0, $hook . '__' . $id . '__' . $display);
    }
  }
}


/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function socomec_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements template_preprocess_html().
 */
function socomec_preprocess_html(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    // load the term entity and get the data from there
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    // Add vocabulary ono body class
    $variables['attributes']['class'][] = 'taxonomy-' . $term->bundle();
  }
}

/**
 * Implements template_preprocess_views_view() for hero view.
 */
function socomec_preprocess_views_view(&$variables) {
  $id = $variables['id'];
  $display_id = $variables['display_id'];
  // Apply background image for hero paragraph view block
  if ((!empty($id) && $id == 'hero_block') && ($display_id == 'block_1' || $display_id == 'block_2')) {
    $rows = $variables['rows'][0]['#rows'];
    $hero_paragraph_id = $rows[0]['#row']->paragraphs_item_field_data_node__field_hero_paragraph_id;
    if(!empty($hero_paragraph_id)){
      /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = Paragraph::load($hero_paragraph_id);
      if(empty($paragraph)){
        return;
      }
      if ($paragraph->hasField('field_background_image')
        && !empty($paragraph->get('field_background_image')->getValue())) {
        $field_background_image_id = $paragraph->get('field_background_image')->first()->getValue()['target_id'];
        $media = Media::load($field_background_image_id);
        $fid = $media->getSource()->getSourceFieldValue($media);
        $file = File::load($fid);
        if(empty($file)){
          return;
        }
        $file_url = file_create_url($file->getFileUri());
      }
      $variables['background_image'] = (!empty($file_url))?$file_url:null;
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function socomec_preprocess_views_view_fields__hero_block__block_2(&$variables) {
  $mid = $variables["row"]->_entity->get('field_file')->getString();

  if (isset($mid) && !empty($mid)) {
    $media = Media::load($mid);
    $fid = $media->getSource()->getSourceFieldValue($media);
    if ($fid != NULL) {
      $file = File::load($fid);
      if(empty($file)){
        return;
      }
      $variables['file_url'] = file_create_url($file->getFileUri());
    }
  }
}

/**
 * Implements template_preprocess_media().
 */
function socomec_preprocess_media(array &$variables) {
  if ($variables["view_mode"] == 'simple_html' && $variables["media"]->bundle() == 'image') {
    if (isset( $variables['content']['field_media_image'][0]['#markup'])) {
      $variables['content']['url'] = $variables['content']['field_media_image'][0]['#markup'];
      $properties = $variables["media"]->field_media_image->getValue();
      if (isset($properties[0]["alt"])) {
        $variables['content']['alt'] = $properties[0]["alt"];
      }
      if (isset($properties[0]["title"])) {
        $variables['content']['title_image'] = $properties[0]["title"];
      }
    }
  }
}

/**
 * Implements template_preprocess_block().
 */
function socomec_preprocess_block(&$variables) {
  if ($uuid = $variables["elements"]["#derivative_plugin_id"]) {
    $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
    if ($block) {
      $block_type = $block->bundle();
      switch ($block_type) {
        case 'tool_promotion':
          // Add background image
          if ($block->hasField('field_background_image')
            && !empty($block->get('field_background_image')->getValue())) {
            $field_background_image_id = $block->get('field_background_image')->first()->getValue()['target_id'];
            $media = Media::load($field_background_image_id);
            $fid = $media->getSource()->getSourceFieldValue($media);
            $file = File::load($fid);
            if(empty($file)){
              return;
            }
            $file_url = file_create_url($file->getFileUri());
          }
          $variables['background_image'] = (!empty($file_url))?$file_url:null;
          break;
        default:
          break;
      }
    }
  }
}

function socomec_preprocess_page(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    switch ($node->bundle()) {
      case 'product':
        // get product ancestors
        $tid = $node->get('field_product_family')->target_id;
        $ancestors = \Drupal::service('entity_type.manager')
          ->getStorage("taxonomy_term")->loadAllParents($tid);
        // check if any ancestor has a teaser to display
        foreach ($ancestors as $term) {
          $teasersQuery = \Drupal::entityQuery('block_content');
          $teasersQuery->condition('type', 'tool_promotion');
          $teasersQuery->condition('field_tool_promotion_families', $term->id());
          $teasersIds = $teasersQuery->execute();
          if ($teasers = BlockContent::loadMultiple($teasersIds)) {
            $teaser = reset($teasers);
            $teaserInstances = $teaser->getInstances();
            $block = reset($teaserInstances);
            $variables['tool_promotion'] = \Drupal::entityTypeManager()->
              getViewBuilder('block')->view($block);
            break;
          }
        }
        break;
      default:
        break;
    }
  }
}
